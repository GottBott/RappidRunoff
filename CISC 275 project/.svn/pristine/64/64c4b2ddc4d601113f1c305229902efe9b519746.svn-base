package group2.game;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Random;

import javax.swing.Timer;

public class RiverBank {
	Boolean[][] can_place_object;
	HashMap<Position,RiverBankObjects> objects; //(0,0)=TOP LEFT, (1,0)=TOP RIGHT, (0,1)= BOTTOM LEFT, (1,1)=BOTTOM RIGHT
	Position position;
	Random rand = new Random();
	long time = 30*1000;
	volatile boolean eroding = false;
	int size;
	double lower_x;
	double upper_x;
	double lower_y;
	double upper_y;
	double height;
	double width;


	Timer timer = new Timer((int)time, new ActionListener(){ 
		public void actionPerformed(ActionEvent evt){
			timer.stop();
			eroding = true;
		}});

	
	public RiverBank(int size, double lower_x, double upper_x, double lower_y, double upper_y){
		this.size=size;
		this.lower_x = lower_x;
		this.upper_x=upper_x;
		this.lower_y=lower_y;
		this.upper_y=upper_y;
		this.height=upper_y-lower_y;
		this.width=upper_x-lower_x;
		can_place_object = new Boolean[size][size];
		initializeBufferArray(size);
		objects = new HashMap<Position,RiverBankObjects>();
		timer.start();
	}
	

	private void initializeBufferArray(int size){
		for(int i = 0; i < size; i++){
			for(int j = 0; j < size; j++){
				can_place_object[i][j] = true;
			}
		}
	}
	
	public boolean addBuffer(Buffer b, Position coordinates){
		if (objects.containsKey(coordinates)){
			if (objects.get(coordinates).ID=="Erosion"){
				Erosion erosion = (Erosion)objects.get(coordinates);
				if (!erosion.is_permanent){
					erosion.getTimer().stop();
					objects.remove(coordinates);
					objects.put(coordinates, b);
					b.deployBuffer();
					b.coordinates=coordinates;
					can_place_object[(int)coordinates.x][(int)coordinates.y]=false;
					return true;
				}
				else if (erosion.is_permanent)
					return false;
			}
			else if (objects.get(coordinates).ID=="Buffer")
				return false;
		}
		
		objects.put(coordinates, b);
		b.deployBuffer();
		b.coordinates=coordinates;
		can_place_object[(int)coordinates.x][(int)coordinates.y]=false;
		return true;
		
			
	}
	
	public void removeBuffer(Buffer b, Position coordinates){
		objects.remove(coordinates);
		
	}
	
	public void removeErosion(Erosion e , Position coordinates){
		objects.remove(coordinates);
	}
	
	public void erode(){
		int x = rand.nextInt(2);
		int y = rand.nextInt(2);
		if (can_place_object[x][y]){
			Erosion e = new Erosion(new Position(x,y));
			e.run();
			objects.put(e.coordinates, e);
			can_place_object[x][y]=false;
			System.out.println("eroding at" +e.coordinates.x+ "," +e.coordinates.y);
			return;
		}
		//make sure it's even possible to erode somewhere before calling erode() again
		else{
			for (int i=0; x<2; x++){
				for (int j=0; x<2; x++){
					if (can_place_object[i][j]){ 			
						erode();
						return;
					}
				}
			}
		}
			
	}
	
	/*
	 * Mary
	 * Each call there is a small chance a bank will erode, checks to see if erosion has become permanent or if a buffer has died  
	 */
	public void update(){
		if (rand.nextInt(4000)==0 && eroding){
			erode();
		}
		if (objects.size()>0){
			try{
			for (RiverBankObjects r: objects.values()){
				double col=r.getXCoordinate();
				double row = r.getYCorrdinate();

				if (r.getID() =="Erosion" && r.is_permanent){
					can_place_object[(int)col][(int)row]=false;
				}
				if (r.ID=="Buffer"){
					if (!r.is_alive){
						can_place_object[(int)col][(int)row]=true;
						removeBuffer((Buffer)r, r.coordinates);
					}
				}
			}
			}
			catch(ConcurrentModificationException e){
				System.out.println("we have a concurrent modification error sometimes so i put a try catch ");
			}
		}
	}
	
	/*
	 * Mary
	 * Checks if click was in range of Bank and which RiverBankObject was clicked 
	 */
	public boolean checkIfInBank(double x, double y){
		return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
		
	}
	
	/*
	 * Mason 
	 * re-did the coordinate mapping to positions (4/14)
	 */
	public Position checkCoordinates(double x, double y){
		
		if( (x>=lower_x) && (x<=(lower_x+(width/2))) && (y>=lower_y) && (y<=(lower_y+(height/2))) )
			return new Position(0,0);
		else if( (x>=(lower_x+(width/2)))  && (x<=(upper_x)) && (y>=(lower_y)) && (y<=(lower_y+(height/2))) )
			return new Position(1,0);
		else if( (x>=lower_x) && (x<=(lower_x+(width/2))) && (y>=lower_y+(height/2)) && (y<=upper_y) )
			return new Position(0,1);
		else if( (x>=(lower_x+(width/2)))  && (x<=(upper_x)) && (y>=lower_y+(height/2)) && (y<=upper_y) )
			return new Position(1,1);
		return null;
		
//		if (x>=(lower_x + width/2) && x<=upper_x && y>=(lower_y + height/2) && y<=upper_y)
//			return new Position(0,0);
//		else if (x>=(lower_x + width/2) && x<=upper_x && y>=lower_y && y<=(lower_y + height/2))
//			return new Position(0,1);
//		else if (x>= lower_x && x<=(lower_x + width/2) && y>=(lower_y + height/2) && y<=upper_y)
//			return new Position(1,0);
//		else if (x>= lower_x && x<=(lower_x + width/2) && y>=lower_y && y<=(lower_y + height/2))
//			return new Position(1,1);
//		return null;
	}
	


}