package group2.game;
/**
 * Stefan
 * 4/3/13
 */

import javax.swing.JFrame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Frame;
import java.util.Random;

public class RapidRunoffGame implements Runnable {

	
	
	public String name = "Rappid Runoff";
	Map map;
	ScoreData score_data;
	Quiz[] quiz_bank = new Quiz[20];
	InputHandler input_handler;
	Random rand = new Random();
	Player player;
	JFrame frame = new JFrame();
	DrawGame draw_game;
	GUIInput gui;
	
	public boolean paused = false;
	public boolean pause = true;
	public long pause_time = 0;
	
	public boolean time_running = true;
	public boolean game_running = true;
	public boolean score_up = false;
	public boolean quizMode = false;
	
	long start_time;
	long last_draw = start_time;
	long time_gap =0;
	
	public int update_count = 0;
	int game_time = 12000;
	
	public double screen_height;
	public double screen_width;
	
	public boolean home_screen; // True if we want home screen to be visible
	public boolean game_screen; // True if we are playing the game
	
	public AePlayWave game_music = new AePlayWave("src/group2/game/sunshine_of_my_love.mid");
	public AePlayWave home_music = new AePlayWave("src/group2/game/home_screen_music.wav");
	
	
	public RapidRunoffGame(){
		this.map = new Map(this);
		this.player = new Player();
		this.draw_game = new DrawGame(this);
		this.start_time  = System.currentTimeMillis();
		this.input_handler = new InputHandler(this);
		addQuizzes();
		
		frame.getContentPane().add(draw_game);
		frame.setTitle("Rapid Runoff");
	  	frame.setBackground(Color.WHITE);
	  	frame.setExtendedState(Frame.MAXIMIZED_BOTH);  
	  	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	  	frame.getContentPane().addMouseListener(input_handler);
	  	frame.setVisible(true);
	  	frame.setResizable(false);
	  	Dimension size = frame.getBounds().getSize();
		screen_width = size.getWidth();
		screen_height = size.getHeight();
		
		this.home_screen = true; // We want to start at the home screen
		this.game_screen = false; // Only one of these 2 can be true at a time
		
	}
	
	
	public void start() {
		time_running = true;
		home_music.start();
		new Thread(this).start();
	}
	
	public void stop() {
		time_running = false;
		game_running = false;
	}
	
	private void addQuizzes(){
		for(int i = 0; i < quiz_bank.length; i++){
			int correct_ans = rand.nextInt(4);
    	    String[] choices = new String[4];//{"A            Duck", "B             Cow", "C            Turkey", "D             Pig"};
    	    for(int j = 0; j < 4; j++){
    	    	choices[j] = j + "            " + "Choice " + j;
    	    }
			quiz_bank[i] = new Quiz("Sample Question " + i + " |||| Correct answer:  " + correct_ans, choices, correct_ans);
		}
	}

	/**
	 * Stefan
	 * Contains the main loop of the game
	 */
	@Override
	public void run() {

		long last_time = System.nanoTime();
		double unprocessed = 0;
		double ns_per_update = 1000000000.0 / 60;
		int updates = 0;
		long last_time1 = System.currentTimeMillis();
	
		while(game_running) {
			long now = System.nanoTime();
			unprocessed += (now - last_time) / ns_per_update;
			last_time = now;
			reDraw(); // ben - calles my redraw function
			while(unprocessed >= 1) {
				updates++;
				update();
				unprocessed -= (pause_time / ns_per_update) + 1;
				last_time1 += pause_time / 1000000;
				pause_time = 0;
			}
			long now1 = System.currentTimeMillis();
			if(now1 - last_time1 > 1000) {
				game_time -= (now1 - last_time1);
				if(game_time < 0) // ben - stop the time from being negative but keep the game running
					game_time =0;
				last_time1 = now1;
				updates = 0;
			}
		}
	}
	
	/**
	 * Stefan
	 * updates all elements of the game
	 */
	public void update() {
		update_count++;
		if(pause){
			pauseGame();
		}
		if(game_time <= 0) {
			highScoreGUI();
			time_running = false;
		}
		else{
			if(update_count % 300 == 0) {
				map.updateSpeed(game_time);
			}
			map.update();
			
			
		}
	}
	
	public void highScoreGUI(){
		if(!score_up){
			score_up = true;
			gui = new GUIInput(this);
			gui.createAndShowGUI();
		}
	}
	
	/**
	 * Ben Gotthold
	 * re draws the game 30 times a seconds
	 * and after the timer stopped
	 */
	public void reDraw(){
		long now_time = System.currentTimeMillis();
		
		
		if(time_gap > 33){ // this is the frequency of refresh
			last_draw = System.currentTimeMillis();
			draw_game.repaint();
			time_gap =0;
			
		}
		else{
			time_gap = now_time - last_draw;
			
		}
	}
	
	/**
	 * Stefan
	 * pauses the game on next update(use this to pause and unpause)
	 */
	public void pause_or_unpause(){
		pause = !pause;
	}
	
	/**
	 * Stefan
	 * pauses the game
	 */
	private void pauseGame(){
		paused = true;
		pause_time = System.nanoTime();
		while(pause){
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		pause_time = System.nanoTime() - pause_time;
		paused = false;
	}
	
	public static void main(String[] args){
		
		RapidRunoffGame game = new RapidRunoffGame();
		game.start();
		
		
	}
}
