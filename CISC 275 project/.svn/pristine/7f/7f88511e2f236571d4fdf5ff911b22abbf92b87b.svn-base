import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import javax.swing.Timer;

public class RiverBank {
	Boolean[][] can_place_buffer;
	HashMap<Position,RiverBankObjects> objects; //(0,0)=bottom right, (1,0)=bottom left, (0,1)= top right, (1,1)=top left
	Position position;
	Random rand = new Random();
	long time = 30*1000;
	volatile boolean eroding = false;
	Boolean[][] can_place_erosion;
	int size;
	double lower_x;
	double upper_x;
	double lower_y;
	double upper_y;
	double height;
	double width;

	
	Timer timer = new Timer((int)time, new ActionListener(){ 
		public void actionPerformed(ActionEvent evt){
			timer.stop();
			eroding = true;
		}});

	
	public RiverBank(int size){
		this.size=size;
		can_place_buffer = new Boolean[size][size];
		can_place_erosion = new Boolean[size][size];
		initializeBufferArray(size);
		objects = new HashMap<Position,RiverBankObjects>();
		timer.start();
	}
	

	private void initializeBufferArray(int size){
		for(int i = 0; i < size; i++){
			for(int j = 0; j < size; j++){
				can_place_buffer[i][j] = true;
				can_place_erosion[i][j] = true;
			}
		}
	}
	
	public void addBuffer(Buffer b, Position coordinates){
		objects.put(coordinates, b);

	}
	
	public void removeBuffer(Buffer b, Position coordinates){
		objects.remove(coordinates);
		
	}
	
	public void erode(){
		for(int i = 0; i < size; i++){
			for(int j = 0; j < size; j++){
				if (can_place_erosion[i][j]){
					Erosion e = new Erosion(new Position(i,j));
					e.run();
					objects.put(e.coordinates, e);
					can_place_erosion[i][j]=false;
					return;
				}
			}
		}
		
			
	}
	
	public void update(){
		if (rand.nextInt(9000)==0 && eroding){
			erode();
			System.out.println("erode");
		}
		for (RiverBankObjects r: objects.values()){
			
			if (r.checkIfPermanent()){
				double col=r.coordinates.x;
				double row = r.coordinates.y;
				can_place_buffer[(int)col][(int)row]=false;
				can_place_erosion[(int)col][(int)row]=false;
			}
			if (!r.checkIfAlive()){
				double col=r.coordinates.x;
				double row = r.coordinates.y;
				can_place_buffer[(int)col][(int)row]=true;
				can_place_erosion[(int)col][(int)row]=true;
				removeBuffer((Buffer)r, r.coordinates);
			}
		}
	}
	
	/*
	 * Mary
	 * Checks if click was in range of Bank and which RiverBankObject was clicked 
	 */
	public boolean checkIfInBank(double x, double y){
		return x >= lower_x && x <= upper_x && y >= lower_y && y <= upper_y;
		
	}
	
	public Position checkCoordinates(double x, double y){
		
		if (x>=(lower_x + width/2) && x<=upper_x && y>=(lower_y + height/2) && y<=upper_y)
			return new Position(0,0);
		else if (x>=(lower_x + width/2) && x<=upper_x && y>=lower_y && y<=(lower_y + height/2))
			return new Position(0,1);
		else if (x>= lower_x && x<=(lower_x + width/2) && y>=(lower_y + height/2) && y<=upper_y)
			return new Position(1,0);
		else if (x>= lower_x && x<=(lower_x + width/2) && y>=lower_y && y<=(lower_y + height/2))
			return new Position(1,1);
		return null;
	}
	

}