package group2.game;
/**
 * Stefan
 * 4/3/13
 */

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Frame;
import java.util.Random;

import javax.swing.JFrame;

public class RapidRunoffGame implements Runnable {

	
	
	public static void main(String[] args){
		
		
		RapidRunoffGame game = new RapidRunoffGame();
		game.start();
		
	}
	
	public String name = "Rappid Runoff";
	Map map;
	ScoreData score_data;
	Quiz[] quiz_bank = new Quiz[20];
	InputHandler input_handler;
	Random rand = new Random();
	Player player;
	JFrame frame = new JFrame();
	DrawGame draw_game;
	
	GUIInput gui;
	public boolean paused = false;
	public boolean pause = true;
	
	public long pause_time = 0;
	public boolean time_running = true;
	public boolean game_running = true;
	public boolean score_up = false;
	public boolean quizMode = false;
	
	public boolean quizFeedbackMode = false;
	long start_time;
	long last_draw = start_time;
	
	long time_gap =0;
	public int update_count = 0;
	
	int game_time = 120000;
	public double screen_height;
	
	public double screen_width;
	public boolean home_screen; // True if we want home screen to be visible
	public boolean game_screen; // True if we are playing the game
	
	
	public boolean high_score_screen;// True if we are playing the game
	
	
	public RapidRunoffGame(){
		this.draw_game = new DrawGame(this);
		this.map = new Map(this);
		this.player = new Player();
		this.start_time  = System.currentTimeMillis();
		this.input_handler = new InputHandler(this);
		addQuizzes();
		
		
		frame.getContentPane().add(draw_game);
		frame.setTitle("Rapid Runoff");
		frame.setIconImage(DrawGame.OilImage[0]);
		frame.setCursor(Cursor.HAND_CURSOR);
	  	frame.setBackground(Color.WHITE);
	  	frame.setExtendedState(Frame.MAXIMIZED_BOTH);  
	  	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	  	frame.getContentPane().addMouseListener(input_handler);
	  	
	  	frame.setVisible(true);
	  	frame.setResizable(false);
	  	Dimension size = frame.getBounds().getSize();
		screen_width = size.getWidth();
		screen_height = size.getHeight();
		
		
		
		this.home_screen = true; // We want to start at the home screen
		this.game_screen = false; // Only one of these 3 can be true at a time
		this.high_score_screen = false; // Only one of these 3 can be true at a time
		
	}
	
	private void addQuizzes(){
		String[] choices0 = new String[]{
				"The water becomes choked with algae and other plant material that kills off the fish", 
				"The fish eat too much of the resulting algae and get sick", 
				"It clogs the storm drain", 
				"The trees along the river become too big and block out the light that gets to the river"};
		Quiz quiz0 = new Quiz("What is the problem with too much fertilizer entering rivers and lakes? ", choices0, 0);
		
		String[] choices1 = new String[]{
				"The fish become too slippery", 
				"Cow", 
				"The oil is poisonous to all marine life in the water", 
				"Pig"};
		Quiz quiz1 = new Quiz("What is the problem with too much oil entering rivers and lakes? ", choices1, 2);
		
		String[] choices2 = new String[]{
				"Roll the car onto the grass, so that the water running off the car will be absorbed instead of going into the storm drain",
				"Put lots of towels down under the car",
				"Roll onto the driveway, so that the water goes down into the storm drain",
				"Cover the storm drain with a garbage bag"};
		Quiz quiz2 = new Quiz("What is one simple thing we can do when washing the car that will help reduce run-off? ", choices2, 0);
		
		String[] choices3 = new String[]{
				"Sewage treatment plant", 
				"Deep underground", 
				"Into the sinks and showers in your house", 
				"Right back into the closest body of water"};
		Quiz quiz3 = new Quiz("Where does the water go after it goes down a storm drain? ", choices3, 3);
		
		String[] choices4 = new String[]{
				"Fertilize your lawn with just enough fertilizer", 
				"Sweep up the fertilzer that gets on the driveway", 
				"Putting a garbage bag over the storm drain",
				"Use fertilizers that minimize impact to the enviroment"};
		Quiz quiz4 = new Quiz(" Which of the following, is NOT a correct way to reduce the amount of fertilizer entering the river? ", choices4, 2);
		
		quiz_bank[0] = quiz0;
		quiz_bank[1] = quiz1;
		quiz_bank[2] = quiz2;
		quiz_bank[3] = quiz3;
		quiz_bank[4] = quiz4;
		
	}
	
	public void highScoreGUI(){
		if(!score_up){
			score_up = true;
			gui = new GUIInput(this);
			gui.createAndShowGUI();
		//	frame.add(new GUIInput(this));
			//frame.setVisible(true);
		
		}
	}

	/**
	 * Stefan
	 * pauses the game on next update(use this to pause and unpause)
	 */
	public void pause_or_unpause(){
		pause = !pause;
	}
	
	/**
	 * Stefan
	 * pauses the game
	 */
	private void pauseGame(){
		paused = true;
		pause_time = System.nanoTime();
		while(pause){
			System.gc();
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		pause_time = System.nanoTime() - pause_time;
		paused = false;
	}
	
	/**
	 * Ben Gotthold
	 * re draws the game 30 times a seconds
	 * and after the timer stopped
	 */
	public void reDraw(){
		long now_time = System.currentTimeMillis();
		
		
		if(time_gap > 33){ // this is the frequency of refresh
			last_draw = System.currentTimeMillis();
			draw_game.repaint();
			time_gap =0;
			
		}
		else{
			time_gap = now_time - last_draw;
			
		}
	}
	
	/**
	 * Stefan
	 * Contains the main loop of the game
	 */
	@Override
	public void run() {

		long last_time = System.nanoTime();
		double unprocessed = 0;
		double ns_per_update = 1000000000.0 / 60;
		int updates = 0;
		long last_time1 = System.currentTimeMillis();
	
		while(game_running) {
			//System.out.println(game_time);
			long now = System.nanoTime();
			unprocessed += (now - last_time) / ns_per_update;
			last_time = now;
			reDraw(); // ben - calles my redraw function
			while(unprocessed >= 1) {
				updates++;
				update();
				unprocessed -= (pause_time / ns_per_update) + 1;
				last_time1 += pause_time / 1000000;
				pause_time = 0;
			}
			long now1 = System.currentTimeMillis();
			if(now1 - last_time1 > 500) {
				draw_game.bg_count = (draw_game.bg_count + 1)%3; // joe - changes background image frame every second.
				game_time -= (now1 - last_time1);
				if(game_time < 0) // ben - stop the time from being negative but keep the game running
					game_time =0;
				last_time1 = now1;
				updates = 0;
			}
		}
	}
	
	public void start() {
		time_running = true;
		new Thread(this).start();
	}
	
	public void stop() {
		time_running = false;
		game_running = false;
		System.gc();
	}
	
	/**
	 * Stefan
	 * updates all elements of the game
	 */
	public void update() {
		update_count++;
		if(pause){
			pauseGame();
		}
		if(game_time <= 0) {
			highScoreGUI();
			time_running = false;
		}
		else{
			if(update_count % 300 == 0) {
				map.updateSpeed(game_time);
			}
			map.update();
		}
	}
}
